// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventGrid
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for NamespacesOperations.
    /// </summary>
    public static partial class NamespacesOperationsExtensions
    {
            /// <summary>
            /// Get a namespace.
            /// </summary>
            /// <remarks>
            /// Get properties of a namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            public static NamespaceModel Get(this INamespacesOperations operations, string resourceGroupName, string namespaceName)
            {
                return operations.GetAsync(resourceGroupName, namespaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a namespace.
            /// </summary>
            /// <remarks>
            /// Get properties of a namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NamespaceModel> GetAsync(this INamespacesOperations operations, string resourceGroupName, string namespaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, namespaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a namespace.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates or updates a new namespace with the specified
            /// parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='namespaceInfo'>
            /// Namespace information.
            /// </param>
            public static NamespaceModel CreateOrUpdate(this INamespacesOperations operations, string resourceGroupName, string namespaceName, NamespaceModel namespaceInfo)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, namespaceName, namespaceInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a namespace.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates or updates a new namespace with the specified
            /// parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='namespaceInfo'>
            /// Namespace information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NamespaceModel> CreateOrUpdateAsync(this INamespacesOperations operations, string resourceGroupName, string namespaceName, NamespaceModel namespaceInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, namespaceName, namespaceInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a namespace.
            /// </summary>
            /// <remarks>
            /// Delete existing namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            public static NamespacesDeleteHeaders Delete(this INamespacesOperations operations, string resourceGroupName, string namespaceName)
            {
                return operations.DeleteAsync(resourceGroupName, namespaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a namespace.
            /// </summary>
            /// <remarks>
            /// Delete existing namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NamespacesDeleteHeaders> DeleteAsync(this INamespacesOperations operations, string resourceGroupName, string namespaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, namespaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update a namespace.
            /// </summary>
            /// <remarks>
            /// Asynchronously updates a namespace with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='namespaceUpdateParameters'>
            /// Namespace update information.
            /// </param>
            public static NamespaceModel Update(this INamespacesOperations operations, string resourceGroupName, string namespaceName, NamespaceUpdateParameters namespaceUpdateParameters)
            {
                return operations.UpdateAsync(resourceGroupName, namespaceName, namespaceUpdateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a namespace.
            /// </summary>
            /// <remarks>
            /// Asynchronously updates a namespace with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='namespaceUpdateParameters'>
            /// Namespace update information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NamespaceModel> UpdateAsync(this INamespacesOperations operations, string resourceGroupName, string namespaceName, NamespaceUpdateParameters namespaceUpdateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, namespaceName, namespaceUpdateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List namespaces under an Azure subscription.
            /// </summary>
            /// <remarks>
            /// List all the namespaces under an Azure subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            public static IPage<NamespaceModel> ListBySubscription(this INamespacesOperations operations, string filter = default(string), int? top = default(int?))
            {
                return operations.ListBySubscriptionAsync(filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List namespaces under an Azure subscription.
            /// </summary>
            /// <remarks>
            /// List all the namespaces under an Azure subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NamespaceModel>> ListBySubscriptionAsync(this INamespacesOperations operations, string filter = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List namespaces under a resource group.
            /// </summary>
            /// <remarks>
            /// List all the namespaces under a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            public static IPage<NamespaceModel> ListByResourceGroup(this INamespacesOperations operations, string resourceGroupName, string filter = default(string), int? top = default(int?))
            {
                return operations.ListByResourceGroupAsync(resourceGroupName, filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List namespaces under a resource group.
            /// </summary>
            /// <remarks>
            /// List all the namespaces under a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NamespaceModel>> ListByResourceGroupAsync(this INamespacesOperations operations, string resourceGroupName, string filter = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List keys for a namespace.
            /// </summary>
            /// <remarks>
            /// List the two keys used to publish to a namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            public static NamespaceSharedAccessKeys ListSharedAccessKeys(this INamespacesOperations operations, string resourceGroupName, string namespaceName)
            {
                return operations.ListSharedAccessKeysAsync(resourceGroupName, namespaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List keys for a namespace.
            /// </summary>
            /// <remarks>
            /// List the two keys used to publish to a namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NamespaceSharedAccessKeys> ListSharedAccessKeysAsync(this INamespacesOperations operations, string resourceGroupName, string namespaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSharedAccessKeysWithHttpMessagesAsync(resourceGroupName, namespaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Regenerate key for a namespace.
            /// </summary>
            /// <remarks>
            /// Regenerate a shared access key for a namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the Namespace.
            /// </param>
            /// <param name='keyName'>
            /// Key name to regenerate key1 or key2.
            /// </param>
            public static NamespaceSharedAccessKeys RegenerateKey(this INamespacesOperations operations, string resourceGroupName, string namespaceName, string keyName)
            {
                return operations.RegenerateKeyAsync(resourceGroupName, namespaceName, keyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerate key for a namespace.
            /// </summary>
            /// <remarks>
            /// Regenerate a shared access key for a namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the Namespace.
            /// </param>
            /// <param name='keyName'>
            /// Key name to regenerate key1 or key2.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NamespaceSharedAccessKeys> RegenerateKeyAsync(this INamespacesOperations operations, string resourceGroupName, string namespaceName, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegenerateKeyWithHttpMessagesAsync(resourceGroupName, namespaceName, keyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a namespace.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates or updates a new namespace with the specified
            /// parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='namespaceInfo'>
            /// Namespace information.
            /// </param>
            public static NamespaceModel BeginCreateOrUpdate(this INamespacesOperations operations, string resourceGroupName, string namespaceName, NamespaceModel namespaceInfo)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, namespaceName, namespaceInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a namespace.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates or updates a new namespace with the specified
            /// parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='namespaceInfo'>
            /// Namespace information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NamespaceModel> BeginCreateOrUpdateAsync(this INamespacesOperations operations, string resourceGroupName, string namespaceName, NamespaceModel namespaceInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, namespaceName, namespaceInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a namespace.
            /// </summary>
            /// <remarks>
            /// Delete existing namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            public static NamespacesDeleteHeaders BeginDelete(this INamespacesOperations operations, string resourceGroupName, string namespaceName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, namespaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a namespace.
            /// </summary>
            /// <remarks>
            /// Delete existing namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NamespacesDeleteHeaders> BeginDeleteAsync(this INamespacesOperations operations, string resourceGroupName, string namespaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, namespaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update a namespace.
            /// </summary>
            /// <remarks>
            /// Asynchronously updates a namespace with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='namespaceUpdateParameters'>
            /// Namespace update information.
            /// </param>
            public static NamespaceModel BeginUpdate(this INamespacesOperations operations, string resourceGroupName, string namespaceName, NamespaceUpdateParameters namespaceUpdateParameters)
            {
                return operations.BeginUpdateAsync(resourceGroupName, namespaceName, namespaceUpdateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a namespace.
            /// </summary>
            /// <remarks>
            /// Asynchronously updates a namespace with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='namespaceUpdateParameters'>
            /// Namespace update information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NamespaceModel> BeginUpdateAsync(this INamespacesOperations operations, string resourceGroupName, string namespaceName, NamespaceUpdateParameters namespaceUpdateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, namespaceName, namespaceUpdateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Regenerate key for a namespace.
            /// </summary>
            /// <remarks>
            /// Regenerate a shared access key for a namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the Namespace.
            /// </param>
            /// <param name='keyName'>
            /// Key name to regenerate key1 or key2.
            /// </param>
            public static NamespaceSharedAccessKeys BeginRegenerateKey(this INamespacesOperations operations, string resourceGroupName, string namespaceName, string keyName)
            {
                return operations.BeginRegenerateKeyAsync(resourceGroupName, namespaceName, keyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerate key for a namespace.
            /// </summary>
            /// <remarks>
            /// Regenerate a shared access key for a namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the Namespace.
            /// </param>
            /// <param name='keyName'>
            /// Key name to regenerate key1 or key2.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NamespaceSharedAccessKeys> BeginRegenerateKeyAsync(this INamespacesOperations operations, string resourceGroupName, string namespaceName, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginRegenerateKeyWithHttpMessagesAsync(resourceGroupName, namespaceName, keyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List namespaces under an Azure subscription.
            /// </summary>
            /// <remarks>
            /// List all the namespaces under an Azure subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NamespaceModel> ListBySubscriptionNext(this INamespacesOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List namespaces under an Azure subscription.
            /// </summary>
            /// <remarks>
            /// List all the namespaces under an Azure subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NamespaceModel>> ListBySubscriptionNextAsync(this INamespacesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List namespaces under a resource group.
            /// </summary>
            /// <remarks>
            /// List all the namespaces under a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NamespaceModel> ListByResourceGroupNext(this INamespacesOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List namespaces under a resource group.
            /// </summary>
            /// <remarks>
            /// List all the namespaces under a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NamespaceModel>> ListByResourceGroupNextAsync(this INamespacesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
