// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventGrid
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for NamespaceTopicEventSubscriptionsOperations.
    /// </summary>
    public static partial class NamespaceTopicEventSubscriptionsOperationsExtensions
    {
            /// <summary>
            /// Get an event subscription of a namespace topic.
            /// </summary>
            /// <remarks>
            /// Get properties of an event subscription of a namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            public static Subscription Get(this INamespaceTopicEventSubscriptionsOperations operations, string resourceGroupName, string namespaceName, string topicName, string eventSubscriptionName)
            {
                return operations.GetAsync(resourceGroupName, namespaceName, topicName, eventSubscriptionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an event subscription of a namespace topic.
            /// </summary>
            /// <remarks>
            /// Get properties of an event subscription of a namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Subscription> GetAsync(this INamespaceTopicEventSubscriptionsOperations operations, string resourceGroupName, string namespaceName, string topicName, string eventSubscriptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, eventSubscriptionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an event subscription of a namespace topic.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates or updates an event subscription of a namespace
            /// topic with the specified parameters. Existing event subscriptions will be
            /// updated with this API.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            /// <param name='eventSubscriptionInfo'>
            /// Event subscription properties containing the delivery mode, filter
            /// information, and others.
            /// </param>
            public static Subscription CreateOrUpdate(this INamespaceTopicEventSubscriptionsOperations operations, string resourceGroupName, string namespaceName, string topicName, string eventSubscriptionName, Subscription eventSubscriptionInfo)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, namespaceName, topicName, eventSubscriptionName, eventSubscriptionInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an event subscription of a namespace topic.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates or updates an event subscription of a namespace
            /// topic with the specified parameters. Existing event subscriptions will be
            /// updated with this API.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            /// <param name='eventSubscriptionInfo'>
            /// Event subscription properties containing the delivery mode, filter
            /// information, and others.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Subscription> CreateOrUpdateAsync(this INamespaceTopicEventSubscriptionsOperations operations, string resourceGroupName, string namespaceName, string topicName, string eventSubscriptionName, Subscription eventSubscriptionInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, eventSubscriptionName, eventSubscriptionInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an event subscription of a namespace topic.
            /// </summary>
            /// <remarks>
            /// Delete an existing event subscription of a namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            public static NamespaceTopicEventSubscriptionsDeleteHeaders Delete(this INamespaceTopicEventSubscriptionsOperations operations, string resourceGroupName, string namespaceName, string topicName, string eventSubscriptionName)
            {
                return operations.DeleteAsync(resourceGroupName, namespaceName, topicName, eventSubscriptionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an event subscription of a namespace topic.
            /// </summary>
            /// <remarks>
            /// Delete an existing event subscription of a namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NamespaceTopicEventSubscriptionsDeleteHeaders> DeleteAsync(this INamespaceTopicEventSubscriptionsOperations operations, string resourceGroupName, string namespaceName, string topicName, string eventSubscriptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, eventSubscriptionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update event subscription of a namespace topic.
            /// </summary>
            /// <remarks>
            /// Update an existing event subscription of a namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            /// <param name='eventSubscriptionUpdateParameters'>
            /// Updated event subscription information.
            /// </param>
            public static Subscription Update(this INamespaceTopicEventSubscriptionsOperations operations, string resourceGroupName, string namespaceName, string topicName, string eventSubscriptionName, SubscriptionUpdateParameters eventSubscriptionUpdateParameters)
            {
                return operations.UpdateAsync(resourceGroupName, namespaceName, topicName, eventSubscriptionName, eventSubscriptionUpdateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update event subscription of a namespace topic.
            /// </summary>
            /// <remarks>
            /// Update an existing event subscription of a namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            /// <param name='eventSubscriptionUpdateParameters'>
            /// Updated event subscription information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Subscription> UpdateAsync(this INamespaceTopicEventSubscriptionsOperations operations, string resourceGroupName, string namespaceName, string topicName, string eventSubscriptionName, SubscriptionUpdateParameters eventSubscriptionUpdateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, eventSubscriptionName, eventSubscriptionUpdateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List event subscriptions of a namespace topic.
            /// </summary>
            /// <remarks>
            /// List event subscriptions that belong to a specific namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            public static IPage<Subscription> ListByNamespaceTopic(this INamespaceTopicEventSubscriptionsOperations operations, string resourceGroupName, string namespaceName, string topicName, string filter = default(string), int? top = default(int?))
            {
                return operations.ListByNamespaceTopicAsync(resourceGroupName, namespaceName, topicName, filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List event subscriptions of a namespace topic.
            /// </summary>
            /// <remarks>
            /// List event subscriptions that belong to a specific namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Subscription>> ListByNamespaceTopicAsync(this INamespaceTopicEventSubscriptionsOperations operations, string resourceGroupName, string namespaceName, string topicName, string filter = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByNamespaceTopicWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an event subscription of a namespace topic.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates or updates an event subscription of a namespace
            /// topic with the specified parameters. Existing event subscriptions will be
            /// updated with this API.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            /// <param name='eventSubscriptionInfo'>
            /// Event subscription properties containing the delivery mode, filter
            /// information, and others.
            /// </param>
            public static Subscription BeginCreateOrUpdate(this INamespaceTopicEventSubscriptionsOperations operations, string resourceGroupName, string namespaceName, string topicName, string eventSubscriptionName, Subscription eventSubscriptionInfo)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, namespaceName, topicName, eventSubscriptionName, eventSubscriptionInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an event subscription of a namespace topic.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates or updates an event subscription of a namespace
            /// topic with the specified parameters. Existing event subscriptions will be
            /// updated with this API.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            /// <param name='eventSubscriptionInfo'>
            /// Event subscription properties containing the delivery mode, filter
            /// information, and others.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Subscription> BeginCreateOrUpdateAsync(this INamespaceTopicEventSubscriptionsOperations operations, string resourceGroupName, string namespaceName, string topicName, string eventSubscriptionName, Subscription eventSubscriptionInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, eventSubscriptionName, eventSubscriptionInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an event subscription of a namespace topic.
            /// </summary>
            /// <remarks>
            /// Delete an existing event subscription of a namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            public static NamespaceTopicEventSubscriptionsDeleteHeaders BeginDelete(this INamespaceTopicEventSubscriptionsOperations operations, string resourceGroupName, string namespaceName, string topicName, string eventSubscriptionName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, namespaceName, topicName, eventSubscriptionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an event subscription of a namespace topic.
            /// </summary>
            /// <remarks>
            /// Delete an existing event subscription of a namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NamespaceTopicEventSubscriptionsDeleteHeaders> BeginDeleteAsync(this INamespaceTopicEventSubscriptionsOperations operations, string resourceGroupName, string namespaceName, string topicName, string eventSubscriptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, eventSubscriptionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update event subscription of a namespace topic.
            /// </summary>
            /// <remarks>
            /// Update an existing event subscription of a namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            /// <param name='eventSubscriptionUpdateParameters'>
            /// Updated event subscription information.
            /// </param>
            public static Subscription BeginUpdate(this INamespaceTopicEventSubscriptionsOperations operations, string resourceGroupName, string namespaceName, string topicName, string eventSubscriptionName, SubscriptionUpdateParameters eventSubscriptionUpdateParameters)
            {
                return operations.BeginUpdateAsync(resourceGroupName, namespaceName, topicName, eventSubscriptionName, eventSubscriptionUpdateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update event subscription of a namespace topic.
            /// </summary>
            /// <remarks>
            /// Update an existing event subscription of a namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            /// <param name='eventSubscriptionUpdateParameters'>
            /// Updated event subscription information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Subscription> BeginUpdateAsync(this INamespaceTopicEventSubscriptionsOperations operations, string resourceGroupName, string namespaceName, string topicName, string eventSubscriptionName, SubscriptionUpdateParameters eventSubscriptionUpdateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, eventSubscriptionName, eventSubscriptionUpdateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List event subscriptions of a namespace topic.
            /// </summary>
            /// <remarks>
            /// List event subscriptions that belong to a specific namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Subscription> ListByNamespaceTopicNext(this INamespaceTopicEventSubscriptionsOperations operations, string nextPageLink)
            {
                return operations.ListByNamespaceTopicNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List event subscriptions of a namespace topic.
            /// </summary>
            /// <remarks>
            /// List event subscriptions that belong to a specific namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Subscription>> ListByNamespaceTopicNextAsync(this INamespaceTopicEventSubscriptionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByNamespaceTopicNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
