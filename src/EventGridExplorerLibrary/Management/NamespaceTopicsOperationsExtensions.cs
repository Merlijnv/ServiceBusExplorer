// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventGrid
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for NamespaceTopicsOperations.
    /// </summary>
    public static partial class NamespaceTopicsOperationsExtensions
    {
            /// <summary>
            /// Get a namespace topic.
            /// </summary>
            /// <remarks>
            /// Get properties of a namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            public static NamespaceTopic Get(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName)
            {
                return operations.GetAsync(resourceGroupName, namespaceName, topicName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a namespace topic.
            /// </summary>
            /// <remarks>
            /// Get properties of a namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NamespaceTopic> GetAsync(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a namespace topic.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new namespace topic with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='namespaceTopicInfo'>
            /// Namespace topic information.
            /// </param>
            public static NamespaceTopic CreateOrUpdate(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName, NamespaceTopic namespaceTopicInfo)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, namespaceName, topicName, namespaceTopicInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a namespace topic.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new namespace topic with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='namespaceTopicInfo'>
            /// Namespace topic information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NamespaceTopic> CreateOrUpdateAsync(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName, NamespaceTopic namespaceTopicInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, namespaceTopicInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a namespace topic.
            /// </summary>
            /// <remarks>
            /// Delete existing namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic.
            /// </param>
            public static NamespaceTopicsDeleteHeaders Delete(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName)
            {
                return operations.DeleteAsync(resourceGroupName, namespaceName, topicName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a namespace topic.
            /// </summary>
            /// <remarks>
            /// Delete existing namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NamespaceTopicsDeleteHeaders> DeleteAsync(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update a namespace topic.
            /// </summary>
            /// <remarks>
            /// Asynchronously updates a namespace topic with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='eventRetentionInDays'>
            /// Event retention for the namespace topic expressed in days. The property
            /// default value is 1 day.
            /// Min event retention duration value is 1 day and max event retention
            /// duration value is 1 day.
            /// </param>
            public static NamespaceTopic Update(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName, int? eventRetentionInDays = default(int?))
            {
                return operations.UpdateAsync(resourceGroupName, namespaceName, topicName, eventRetentionInDays).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a namespace topic.
            /// </summary>
            /// <remarks>
            /// Asynchronously updates a namespace topic with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='eventRetentionInDays'>
            /// Event retention for the namespace topic expressed in days. The property
            /// default value is 1 day.
            /// Min event retention duration value is 1 day and max event retention
            /// duration value is 1 day.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NamespaceTopic> UpdateAsync(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName, int? eventRetentionInDays = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, eventRetentionInDays, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List namespace topics under a namespace.
            /// </summary>
            /// <remarks>
            /// List all the namespace topics under a namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            public static IPage<NamespaceTopic> ListByNamespace(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string filter = default(string), int? top = default(int?))
            {
                return operations.ListByNamespaceAsync(resourceGroupName, namespaceName, filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List namespace topics under a namespace.
            /// </summary>
            /// <remarks>
            /// List all the namespace topics under a namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NamespaceTopic>> ListByNamespaceAsync(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string filter = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByNamespaceWithHttpMessagesAsync(resourceGroupName, namespaceName, filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List keys for a namespace topic.
            /// </summary>
            /// <remarks>
            /// List the two keys used to publish to a namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic.
            /// </param>
            public static TopicSharedAccessKeys ListSharedAccessKeys(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName)
            {
                return operations.ListSharedAccessKeysAsync(resourceGroupName, namespaceName, topicName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List keys for a namespace topic.
            /// </summary>
            /// <remarks>
            /// List the two keys used to publish to a namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TopicSharedAccessKeys> ListSharedAccessKeysAsync(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSharedAccessKeysWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Regenerate key for a namespace topic.
            /// </summary>
            /// <remarks>
            /// Regenerate a shared access key for a namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic.
            /// </param>
            /// <param name='keyName'>
            /// Key name to regenerate key1 or key2
            /// </param>
            public static TopicSharedAccessKeys RegenerateKey(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName, string keyName)
            {
                return operations.RegenerateKeyAsync(resourceGroupName, namespaceName, topicName, keyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerate key for a namespace topic.
            /// </summary>
            /// <remarks>
            /// Regenerate a shared access key for a namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic.
            /// </param>
            /// <param name='keyName'>
            /// Key name to regenerate key1 or key2
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TopicSharedAccessKeys> RegenerateKeyAsync(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegenerateKeyWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, keyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a namespace topic.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new namespace topic with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='namespaceTopicInfo'>
            /// Namespace topic information.
            /// </param>
            public static NamespaceTopic BeginCreateOrUpdate(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName, NamespaceTopic namespaceTopicInfo)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, namespaceName, topicName, namespaceTopicInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a namespace topic.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new namespace topic with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='namespaceTopicInfo'>
            /// Namespace topic information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NamespaceTopic> BeginCreateOrUpdateAsync(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName, NamespaceTopic namespaceTopicInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, namespaceTopicInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a namespace topic.
            /// </summary>
            /// <remarks>
            /// Delete existing namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic.
            /// </param>
            public static NamespaceTopicsDeleteHeaders BeginDelete(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, namespaceName, topicName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a namespace topic.
            /// </summary>
            /// <remarks>
            /// Delete existing namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NamespaceTopicsDeleteHeaders> BeginDeleteAsync(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update a namespace topic.
            /// </summary>
            /// <remarks>
            /// Asynchronously updates a namespace topic with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='eventRetentionInDays'>
            /// Event retention for the namespace topic expressed in days. The property
            /// default value is 1 day.
            /// Min event retention duration value is 1 day and max event retention
            /// duration value is 1 day.
            /// </param>
            public static NamespaceTopic BeginUpdate(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName, int? eventRetentionInDays = default(int?))
            {
                return operations.BeginUpdateAsync(resourceGroupName, namespaceName, topicName, eventRetentionInDays).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a namespace topic.
            /// </summary>
            /// <remarks>
            /// Asynchronously updates a namespace topic with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the namespace topic.
            /// </param>
            /// <param name='eventRetentionInDays'>
            /// Event retention for the namespace topic expressed in days. The property
            /// default value is 1 day.
            /// Min event retention duration value is 1 day and max event retention
            /// duration value is 1 day.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NamespaceTopic> BeginUpdateAsync(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName, int? eventRetentionInDays = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, eventRetentionInDays, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Regenerate key for a namespace topic.
            /// </summary>
            /// <remarks>
            /// Regenerate a shared access key for a namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic.
            /// </param>
            /// <param name='keyName'>
            /// Key name to regenerate key1 or key2
            /// </param>
            public static TopicSharedAccessKeys BeginRegenerateKey(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName, string keyName)
            {
                return operations.BeginRegenerateKeyAsync(resourceGroupName, namespaceName, topicName, keyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerate key for a namespace topic.
            /// </summary>
            /// <remarks>
            /// Regenerate a shared access key for a namespace topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the namespace.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic.
            /// </param>
            /// <param name='keyName'>
            /// Key name to regenerate key1 or key2
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TopicSharedAccessKeys> BeginRegenerateKeyAsync(this INamespaceTopicsOperations operations, string resourceGroupName, string namespaceName, string topicName, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginRegenerateKeyWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, keyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List namespace topics under a namespace.
            /// </summary>
            /// <remarks>
            /// List all the namespace topics under a namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NamespaceTopic> ListByNamespaceNext(this INamespaceTopicsOperations operations, string nextPageLink)
            {
                return operations.ListByNamespaceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List namespace topics under a namespace.
            /// </summary>
            /// <remarks>
            /// List all the namespace topics under a namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NamespaceTopic>> ListByNamespaceNextAsync(this INamespaceTopicsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByNamespaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
