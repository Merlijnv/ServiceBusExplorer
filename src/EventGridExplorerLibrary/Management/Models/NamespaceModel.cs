// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventGrid.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Namespace resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class NamespaceModel : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the NamespaceModel class.
        /// </summary>
        public NamespaceModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NamespaceModel class.
        /// </summary>
        /// <param name="location">Location of the resource.</param>
        /// <param name="id">Fully qualified identifier of the
        /// resource.</param>
        /// <param name="name">Name of the resource.</param>
        /// <param name="type">Type of the resource.</param>
        /// <param name="tags">Tags of the resource.</param>
        /// <param name="provisioningState">Provisioning state of the namespace
        /// resource. Possible values include: 'Creating', 'Updating',
        /// 'Deleting', 'Succeeded', 'Canceled', 'Failed', 'Deleted',
        /// 'DeleteFailed', 'CreateFailed', 'UpdatedFailed'</param>
        /// <param name="topicsConfiguration">Topics configuration information
        /// for the namespace resource</param>
        /// <param name="topicSpacesConfiguration">Topic spaces configuration
        /// information for the namespace resource</param>
        /// <param name="isZoneRedundant">Allows the user to specify if the
        /// service is zone-redundant. This is a required property and user
        /// needs to specify this value explicitly.
        /// Once specified, this property cannot be updated.</param>
        /// <param name="publicNetworkAccess">This determines if traffic is
        /// allowed over public network. By default it is enabled.
        /// You can further restrict to specific IPs by configuring &lt;seealso
        /// cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.PubSub.NamespaceProperties.InboundIpRules"
        /// /&gt;. Possible values include: 'Enabled', 'Disabled',
        /// 'SecuredByPerimeter'</param>
        /// <param name="inboundIpRules">This can be used to restrict traffic
        /// from specific IPs instead of all IPs. Note: These are considered
        /// only if PublicNetworkAccess is enabled.</param>
        /// <param name="minimumTlsVersionAllowed">Minimum TLS version of the
        /// publisher allowed to publish to this namespace. Only TLS version
        /// 1.2 is supported. Possible values include: '1.0', '1.1',
        /// '1.2'</param>
        /// <param name="sku">Represents available Sku pricing tiers.</param>
        /// <param name="identity">Identity information for the Namespace
        /// resource.</param>
        /// <param name="systemData">The system metadata relating to the
        /// namespace resource.</param>
        public NamespaceModel(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string provisioningState = default(string), TopicsConfiguration topicsConfiguration = default(TopicsConfiguration), bool? isZoneRedundant = default(bool?), string publicNetworkAccess = default(string), IList<InboundIpRule> inboundIpRules = default(IList<InboundIpRule>), string minimumTlsVersionAllowed = default(string), NamespaceSku sku = default(NamespaceSku), IdentityInfo identity = default(IdentityInfo), SystemData systemData = default(SystemData))
            : base(location, id, name, type, tags)
        {
            ProvisioningState = provisioningState;
            TopicsConfiguration = topicsConfiguration;
            IsZoneRedundant = isZoneRedundant;
            PublicNetworkAccess = publicNetworkAccess;
            InboundIpRules = inboundIpRules;
            MinimumTlsVersionAllowed = minimumTlsVersionAllowed;
            Sku = sku;
            Identity = identity;
            SystemData = systemData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets provisioning state of the namespace resource. Possible values
        /// include: 'Creating', 'Updating', 'Deleting', 'Succeeded',
        /// 'Canceled', 'Failed', 'Deleted', 'DeleteFailed', 'CreateFailed',
        /// 'UpdatedFailed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets topics configuration information for the namespace
        /// resource
        /// </summary>
        [JsonProperty(PropertyName = "properties.topicsConfiguration")]
        public TopicsConfiguration TopicsConfiguration { get; set; }

        /// <summary>
        /// Gets or sets allows the user to specify if the service is
        /// zone-redundant. This is a required property and user needs to
        /// specify this value explicitly.
        /// Once specified, this property cannot be updated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isZoneRedundant")]
        public bool? IsZoneRedundant { get; set; }

        /// <summary>
        /// Gets or sets this determines if traffic is allowed over public
        /// network. By default it is enabled.
        /// You can further restrict to specific IPs by configuring
        /// &amp;lt;seealso
        /// cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.PubSub.NamespaceProperties.InboundIpRules"
        /// /&amp;gt;. Possible values include: 'Enabled', 'Disabled',
        /// 'SecuredByPerimeter'
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess { get; set; }

        /// <summary>
        /// Gets or sets this can be used to restrict traffic from specific IPs
        /// instead of all IPs. Note: These are considered only if
        /// PublicNetworkAccess is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.inboundIpRules")]
        public IList<InboundIpRule> InboundIpRules { get; set; }

        /// <summary>
        /// Gets or sets minimum TLS version of the publisher allowed to
        /// publish to this namespace. Only TLS version 1.2 is supported.
        /// Possible values include: '1.0', '1.1', '1.2'
        /// </summary>
        [JsonProperty(PropertyName = "properties.minimumTlsVersionAllowed")]
        public string MinimumTlsVersionAllowed { get; set; }

        /// <summary>
        /// Gets or sets represents available Sku pricing tiers.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public NamespaceSku Sku { get; set; }

        /// <summary>
        /// Gets or sets identity information for the Namespace resource.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public IdentityInfo Identity { get; set; }

        /// <summary>
        /// Gets or sets the system metadata relating to the namespace
        /// resource.
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
